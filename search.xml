<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言入门笔记（4）</title>
    <url>/2021/08/20/eight/</url>
    <content><![CDATA[<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a [<span class="number">3</span>] [<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>代表定义了一个3行5列的二维数组</p>
<p>但a [2] [4]</p>
<p>指的是数组中第3行第5列的那个元素</p>
<span id="more"></span>

<p>因为计算机是<strong>从0开始数数</strong>的</p>
<p>多维数组也可借此类推</p>
<h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a [] [<span class="number">5</span>] = &#123;</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">也可以将元素放在一行，只是不便阅读</span><br><span class="line"><span class="keyword">int</span> a [] [<span class="number">5</span>] = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>

<p>列数必须给出，行数可以省略，由编译器来数</p>
<p>每行一个{}，逗号分隔</p>
<p>最后的逗号可以存在</p>
<p>如果省略了元素，表示补零</p>
<p>也可以用定位（c99 only)</p>
<h2 id="数组的大小"><a href="#数组的大小" class="headerlink" title="数组的大小"></a>数组的大小</h2><p>sizeof可以表示出某个类型或变量在内存中占据的字节数</p>
<p>因此数组的元素个数可以用**sizeof(a)/sizeof(a[0])**表示</p>
<p>这样表述的好处是，一旦修改数组中初始的数据，不需要再修改遍历的代码</p>
<h2 id="数组的赋值"><a href="#数组的赋值" class="headerlink" title="数组的赋值"></a>数组的赋值</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[] = a;</span><br></pre></td></tr></table></figure>

<p>这是不可行的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> b[] = <span class="keyword">int</span> <span class="keyword">const</span> b[]</span><br></pre></td></tr></table></figure>



<p>b[]被定义后具有了常属性，不能直接赋值给另一个数组</p>
<p>但可以让b数组遍历读入a数组的每一个元素，完成所谓的复制，代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">b[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历数组做赋值</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">for</span> ( k=<span class="number">0</span>; k&lt;<span class="number">4</span>; k++ ) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%d &quot;</span>,b[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历输出b数组</span></span><br></pre></td></tr></table></figure>

<img src="/2021/08/20/eight/1.jpg" class title="blog">

<p>结果正确，但有些人遍历输出时也用了i</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">b[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++ ) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%d &quot;</span>,b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行确实没问题，但要指出的是：<font color="red">一专多能是不好的代码</font></p>
<p>当然也可以用<strong>指针</strong>，这里不再赘述</p>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>一维数组的遍历可以用一个for循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++ ) &#123;</span><br><span class="line">    a [i] = ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二维数组的遍历则需要用两个for循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++ ) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++) &#123;</span><br><span class="line">        a [i] [j] = ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历数组可以做数组的初始化，可以输出数组，可以搜索数组中的元素等等</p>
<p>在遍历时一般用for循环，<font color="red">最好用0和&lt;</font>,而不是1和&lt;=,因为前者遍历时最大的i<font color="red">恰好是数组的最大下标</font></p>
<h2 id="运算符-amp"><a href="#运算符-amp" class="headerlink" title="运算符&amp;"></a>运算符&amp;</h2><h3 id="变量的地址"><a href="#变量的地址" class="headerlink" title="变量的地址"></a>变量的地址</h3><p>使用&amp;可以获得变量的地址，地址的大小是否与int相同取决于编译器是32位还是64位</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>,&amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;i);</span><br></pre></td></tr></table></figure>

<p>所以要输出一个变量的地址时，更应该用%p而不是%x，%x只是把地址当成一个16进制的整数，地址并不总和整数相同</p>
<h3 id="数组的地址"><a href="#数组的地址" class="headerlink" title="数组的地址"></a>数组的地址</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a[<span class="number">1</span>]);</span><br><span class="line">结果为：</span><br><span class="line"><span class="number">0xbff8dd44</span></span><br><span class="line"><span class="number">0xbff8dd44</span></span><br><span class="line"><span class="number">0xbff8dd44</span></span><br><span class="line"><span class="number">0xbff8dd48</span></span><br></pre></td></tr></table></figure>

<p>从中我们可以看出地址&amp;a == a == a[0]，且相邻的元素差4个字节</p>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针就是保存地址的变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* p == <span class="keyword">int</span> *p</span><br></pre></td></tr></table></figure>

<p>两种写法都一样,类型是int,不是int*</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span>* p = &amp;i;</span><br></pre></td></tr></table></figure>

<p>i的地址传给了*p,也就是说p指向了i</p>
<h3 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h3><p>普通变量的值是实际的值</p>
<p>指针变量的值是具有实际值的地址</p>
<h3 id="作为参数的指针"><a href="#作为参数的指针" class="headerlink" title="作为参数的指针"></a>作为参数的指针</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span> *p )</span></span>;</span><br><span class="line">f( &amp;i );</span><br></pre></td></tr></table></figure>

<p>参数是普通变量的地址</p>
<p>在这个函数内可以通过这个指针访问外面的变量i</p>
<h3 id="运算符“-”"><a href="#运算符“-”" class="headerlink" title="运算符“ * ”"></a>运算符“ * ”</h3><p>*是一个单目运算符，用来访问指针的值所表示的地址上的变量</p>
<p>*P可以做左值和又值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> k = *p;</span><br><span class="line">*p = k + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="数组作为指针"><a href="#数组作为指针" class="headerlink" title="数组作为指针"></a>数组作为指针</h3><p>数组变量是特殊的指针,因为数组本身表达地址</p>
<p>因此对于int*p=a，无需用&amp;取地址，但是数组的单元表达的是变量，需要用&amp;取地址</p>
<p>即a == &amp;a[0],指针也可以用[]运算符</p>
<p>下面四种函数原型等价</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> *ar,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> *,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> ar[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> [],<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>另外在函数参数中数组相当于指针</p>
<h3 id="利用指针交换两个数组"><a href="#利用指针交换两个数组" class="headerlink" title="* 利用指针交换两个数组"></a>* 利用指针交换两个数组</h3><p>代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,b[<span class="number">3</span>]=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,t,i,*p1=a,*p2=b;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">	t=*p1;</span><br><span class="line">    *p1=*p2;</span><br><span class="line">    *p2=t;</span><br><span class="line">	p1++;</span><br><span class="line">    p2++;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,b[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/08/20/eight/2.jpg" class title="blog">

<p>结果正确</p>
<h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>char是一种整数，也是一种特殊的类型：字符。</p>
<p>用单引号表示的字符字面量：’a’,’1’</p>
<p>‘’也是一个字符</p>
<p>printf和scanf里用%c输入字符</p>
<h3 id="字符的输入输出"><a href="#字符的输入输出" class="headerlink" title="字符的输入输出"></a>字符的输入输出</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">char</span> i = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="built_in">scanf</span>( <span class="string">&quot;%c&quot;</span>,&amp;i );得到<span class="number">1</span></span><br><span class="line"><span class="built_in">scanf</span>( <span class="string">&quot;%d&quot;</span>,&amp;i );得到<span class="number">49</span></span><br></pre></td></tr></table></figure>

<p>因为’1‘的ASCII编码是49</p>
<h3 id="混合输入"><a href="#混合输入" class="headerlink" title="混合输入"></a>混合输入</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>,&amp;i,&amp;c);</span><br><span class="line"><span class="number">2.</span><span class="built_in">scanf</span>(<span class="string">&quot;%d%c&quot;</span>,&amp;i,&amp;c);</span><br></pre></td></tr></table></figure>

<p>二者不同，在于2中读取输入的两个值时，如果有空格会读取空格，空格的ASCII码为32</p>
<h3 id="字符计算"><a href="#字符计算" class="headerlink" title="字符计算"></a>字符计算</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c =<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">c++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,c);</span><br><span class="line">结果为B    </span><br></pre></td></tr></table></figure>

<p>说明一个字符加一个数字得到ASCII码表中那个数之后的字符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="string">&#x27;Z&#x27;</span>-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">结果为<span class="number">25</span></span><br></pre></td></tr></table></figure>

<p>说明两个字符的减，得到的是它们在表中的距离</p>
<p>大小写转换也可以通过字符计算实现</p>
<h3 id="逃逸字符"><a href="#逃逸字符" class="headerlink" title="逃逸字符"></a>逃逸字符</h3><p>用来表达<strong>无法印出的控制字符</strong>或<strong>特殊作用的字符</strong></p>
<img src="/2021/08/20/eight/3.jpg" class title="blog">

<p>要指出的是回车和换行是两个动作，只是编译器顺带着换行一起执行了</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> word[] = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;!&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>字符串以数组形式存在，以数组或指针的形式访问</p>
<p>\0是结束的标志，它不是字符串的一部分，但它占用一个字节的空间</p>
<p>string.h 里有很多处理字符的函数</p>
<p>两个相邻的字符串常量会相连</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;123&quot;</span></span><br><span class="line">       <span class="string">&quot;456&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>会输出123456</p>
<p>另外不能用运算符对字符串做运算</p>
<p>”a“就相当于对a做了初始化</p>
<h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><p>字符串初始化后便不可变，字符串在内存中是<font color="red">只读</font>的</p>
<p>用指针改变字符串会触发系统的保护机制，引起严重后果</p>
<h3 id="字符串的赋值"><a href="#字符串的赋值" class="headerlink" title="字符串的赋值"></a>字符串的赋值</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *t = <span class="string">&quot;title&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *s;</span><br><span class="line">s = t;</span><br></pre></td></tr></table></figure>

<p>这样做只是让指针s指向了t所指的字符串，并没有产生新的字符串</p>
<h3 id="字符串输入输出"><a href="#字符串输入输出" class="headerlink" title="字符串输入输出"></a>字符串输入输出</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a[<span class="number">8</span>]</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br></pre></td></tr></table></figure>

<p>scanf的读入是不安全的，因为不知道要读入的内容的长度</p>
<p>但可以这样：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a[<span class="number">8</span>]</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%7s&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%7s&quot;</span>,a);</span><br></pre></td></tr></table></figure>

<p>“7”告诉了scanf最多读7个</p>
<p>两个scanf可以连续读入</p>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>char*a不能直接用，要先对a初始化，否则出不出错就靠运气了</p>
<p>终于码完了。。。</p>
<p><font color="cornflowerblue">C语言入门篇完结！！！</font></p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年追过的神游</title>
    <url>/2021/09/01/eleventh/</url>
    <content><![CDATA[<p>以前总觉得游戏是个贬义词，它带给我的负面影响远多于正面，现在回头看去，我反倒不后悔。我现在越发喜欢一些独立游戏，我想你只有体验过才会懂得，你能从中得到的不仅仅是成就感，更有感悟与感动，反思与成长</p>
<p>游戏没有排名，所以的良心之作都值得赞誉(含剧透，谨慎观看)</p>
<span id="more"></span>

<h2 id="1-传说之下（undertale"><a href="#1-传说之下（undertale" class="headerlink" title="1.传说之下（undertale)"></a>1.传说之下（undertale)</h2><img src="/2021/09/01/eleventh/1.jpg" class title="blog">

<p>我一向喜欢玩法新颖（不按套路出牌）的游戏，我们习惯了玩打怪升级的爽游，进了游戏，先入为主，逢怪必杀。在这个游戏中任何怪都可以被说服，你只需击破怪物内心的防线。相反，你的屠杀会让你负罪累累，游戏将对你以牙还牙。当你还没弄清怪物的立场，上去便是一刀，最终boss将没有“仁慈”这一选项。你如果耐心走入那些中二的，呆萌的怪物的心房，敌人会成为挚友，甚至留下求助的联系方式。你的经验和等级就是你最终boss的强度，你的firstblood会改变你的结局，见到与你无仇的npc,为何要兵戎相见？</p>
<p>独特之处：音乐完美贴合像素风，当你对怪物动情，最终boss能关闭游戏程序，一个按钮能有10次不同互动（细节）</p>
<p>游戏口碑：steam好评如潮，游戏音乐原声带steam排名第一，ign满分10分…</p>
<h2 id="2-泰拉瑞亚（terraria）"><a href="#2-泰拉瑞亚（terraria）" class="headerlink" title="2.泰拉瑞亚（terraria）"></a>2.泰拉瑞亚（terraria）</h2><img src="/2021/09/01/eleventh/2.jpg" class title="blog">

<p>这是一款2d像素沙盒游戏，这是我买的第一款游戏，刚买完就半价，emm…不亏！</p>
<p>游戏对新手可能不太友好，游戏的精彩也恰在过程之中，如果没有向导npc，你甚至不知道该做什么，我喜欢游戏的像素风收集感，激动人心的音乐，充满未知的欢喜，还有官方认可的玩家自制模组工具等等</p>
<p>游戏口碑：steam好评如潮，今年三月steam好评率第一登顶(把v社传送门2都超了)，3500万销量</p>
<h2 id="3-塞尔达荒野之息（The-Legend-of-Zelda-Breath-of-the-Wild）"><a href="#3-塞尔达荒野之息（The-Legend-of-Zelda-Breath-of-the-Wild）" class="headerlink" title="3.塞尔达荒野之息（The Legend of Zelda: Breath of the Wild）"></a>3.塞尔达荒野之息（The Legend of Zelda: Breath of the Wild）</h2><img src="/2021/09/01/eleventh/3.jpg" class title="blog">

<p>国外玩家口中极好的游戏，任天堂，wiiu独占，门槛较高，pc的cemu模拟器可以60帧运行</p>
<p>我通关了普通模式，被它的充满冒险元素的广阔大陆深深吸引。这款游戏刷新了玩家对开放世界游戏的认识，我们可能对这款游戏毫不知情，但我相信你一定看过原神的广告，或者说玩过原神，我不得不说原神真的从野炊中借鉴了不少，我今天刚刚通关了原神2.1剧情，其中的珊瑚宫我竟有些眼熟？！塞尔达卓拉高地的宫殿在我脑海中不停的浮现。。。原神就不多说了，玩法？跑图，传送锚点，爬山…野炊都有了，原神四个字形容“又肝又氪“，野炊七个字形容”不务正业的林克”</p>
<p>游戏口碑：ign满分10分，”拿奖拿到手软“，“野炊天下第一”</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我觉得，判断一款游戏是否诚意满满，就在它的细节，一个场景能有几个互动，能否更加ai智能一些，让游戏被赋予温度，代码可没有这么冰冷。国内为什么出不了3a大作？我想离不开利益</p>
<h3 id="我认为的佳作："><a href="#我认为的佳作：" class="headerlink" title="我认为的佳作："></a>我认为的佳作：</h3><p>1.传说之下<br>3.传送门系列<br>4.泰拉瑞亚<br>5.双人成行<br>6.底特律变人<br>7.奇异人生1<br>8.我的世界<br>9.勇敢的心<br>10.古墓丽影9<br>11.abzu智慧之海<br>12.上古卷轴5<br>13.去月球<br>14.塞尔达系列<br>15.画中世界<br>16.纪念碑谷系列<br>17.寻声探路<br>18.未上锁的房间系列<br>19.最终幻想15<br>20.艾迪芬奇的记忆<br>21.半条命系列<br>22.超限域空间<br>23.雨中冒险2<br>24.死亡细胞<br>25.风之旅人<br>26.孩子们<br>27.修剪艺术<br>28.魔女之泉系列<br>29.信任的进化<br>30.绘真妙笔千山<br>31.寻找天堂<br>32.艾希<br>33.海之号角<br>34.生存战争系列</p>
<p>一些经典的游戏就不提了</p>
<h3 id="我仍在期待的几款游戏"><a href="#我仍在期待的几款游戏" class="headerlink" title="我仍在期待的几款游戏"></a>我仍在期待的几款游戏</h3><p>1.空洞骑士-丝之歌<br>2.黑神话悟空<br>3.上古卷轴6<br>4.最终幻想7重置版pc<br>5.我的世界1.18<br>6.森林之子<br>7.塞尔达荒野之息续作</p>
]]></content>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>网络工具和软件分享</title>
    <url>/2021/09/21/fifteenth/</url>
    <content><![CDATA[<h1 id="详情如下"><a href="#详情如下" class="headerlink" title="详情如下"></a>详情如下</h1><span id="more"></span>

<h2 id="1-f-lux（软件）"><a href="#1-f-lux（软件）" class="headerlink" title="1.f.lux（软件）"></a>1.f.lux（软件）</h2><p>硬核护眼软件，你可以输入经纬度让程序根据日出日落时间调整减少蓝光的程度</p>
<img src="/2021/09/21/fifteenth/1.jpg" class title="blog">

<img src="/2021/09/21/fifteenth/2.jpg" class title="blog">

<h2 id="2-wallhaven（网站）"><a href="#2-wallhaven（网站）" class="headerlink" title="2.wallhaven（网站）"></a>2.wallhaven（网站）</h2><p>4K壁纸网站，可以调整图片尺寸比例和分辨度，可根据颜色搜索</p>
<img src="/2021/09/21/fifteenth/3.jpg" class title="blog">

<h2 id="3-蓝调music（网站）"><a href="#3-蓝调music（网站）" class="headerlink" title="3.蓝调music（网站）"></a>3.蓝调music（网站）</h2><p>可以下载网易云，QQ音乐，酷狗音乐，百度音乐，虾米音乐五个平台的无损音乐，一些冷门纯音乐也可以搜到</p>
<img src="/2021/09/21/fifteenth/4.jpg" class title="blog">

<h2 id="4-greenhub（win10edge浏览器扩展）"><a href="#4-greenhub（win10edge浏览器扩展）" class="headerlink" title="4.greenhub（win10edge浏览器扩展）"></a>4.greenhub（win10edge浏览器扩展）</h2><p>就是魔法（vpn），可以让你访问外网，节点都比较稳定，近期可能是接近十一了，低调了些，建议大家节制使用，一般也用不到，想用的时候基本也找不到（免费的）</p>
<img src="/2021/09/21/fifteenth/5.jpg" class title="blog">

<p>祝各位中秋节快乐！！！<br>希望郑州早日开学。。。</p>
]]></content>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言入门笔记（1）</title>
    <url>/2021/08/17/fifth/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我觉得目前比较好的c语言入门网课有b站的失乐-try上传的C语言入门视频，以及中国大学mooc中浙大翁恺老师的<a href="https://www.icourse163.org/course/ZJU-199001">C语言程序设计入门视频</a>。都对新手友好到了极点。我这里选的是翁恺老师的课，比较系统，也比较专业。我会着重指出易错易忘的知识，以便复习，其他不再赘述。</p>
<span id="more"></span>

<p>关于对计算机知识的深入理解，我推荐b站搬运的YouTube的<a href="https://b23.tv/J0ghf3">计算机科学速成课</a>，里面把计算机的历史，发展，进化讲的<strong>相对容易</strong>理解些，虽然有些知识我听不懂，但我大为震撼。</p>
<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>Windows系统推荐dev-C++，当然也可以线上编译，不过不能保存</p>
<h2 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span> ( <span class="string">&quot;hello world\n&quot;</span> );</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了printf函数，剩下的是c语言的基本框架</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>a = 0;</p>
<p>把0赋值给a，a作为变量保存了数据0，a之后还可变为其它值。</p>
<p>a是一种标识符，<font color="red">只能有字母，数字，下划线组成，数字不能位于头部，关键字不能做标识符</font>。</p>
<p>关键字用多了就记住了，例如char,do,while,if,sizeof….</p>
<h2 id="赋值与初始化"><a href="#赋值与初始化" class="headerlink" title="赋值与初始化"></a>赋值与初始化</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br></pre></td></tr></table></figure>



<p>这里定义了一个变量a,但你不知道a是几，系统保存的可能是一个任意的数；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a =<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>在定义变量时，建议<font color="red">在代码开头的地方定义变量</font>，因为ansi c标准只能在代码开头的地方定义变量，c99标准则无此要求。</p>
<p>a被初始化为0，系统保存的a的值是0。</p>
<p><font color="red">初始化是一个好习惯</font>，不这样做可能会莫名报错，尤其到指针那一块。</p>
<h2 id="scanf函数"><a href="#scanf函数" class="headerlink" title="scanf函数"></a>scanf函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br></pre></td></tr></table></figure>

<p>%d意为取整数a，&amp;取地址，让我输入a</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span> + b</span><br></pre></td></tr></table></figure>

<p>直接写在程序里的1是直接量，是常量的一种。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>const作为修饰符加在int的前面，使a成为一个具有常属性的变量，即常变量a不能再被修改，否则会报错。</p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>分为单精度浮点数和双精度浮点数，双精度浮点数能保留更多位小数，更精确,%f是取小数。</p>
<p>我们试一下下面的运算</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果为%d。\n&quot;</span>,((a+b)/<span class="number">3</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里输入5，5，结果为3，没有小数</p>
<p>如果输入10 ，10，结果不是6.666…而是6，这里说明4舍5入不符合</p>
<p>这里需要知道%f是取单精度，%lf是双精度</p>
<p>我们再试一下输出小数结果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果为%f。\n&quot;</span>,((a+b)/<span class="number">3</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里输入5，5，结果为0.000000，又出错了</p>
<p>到这里要指出：</p>
<p>在c语言中<font color="red">两个整数的运算结果只能是整数</font>，用%d得到的是整数，用%f得不到正确结果，如果把3换成3.0，系统在计算时会把a+b的结果化为浮点数，<font color="red">浮点数间的运算就是浮点数</font>。我们再试一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果为%f。\n&quot;</span>,((a+b)/<span class="number">3.0</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里输入5，5，结果正确，为3.333333</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法笔记（Typora)</title>
    <url>/2021/08/13/first/</url>
    <content><![CDATA[<h2 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h2><p> #+空格+内容 回车执行/ctrl+1，ctrl+0复原</p>
<span id="more"></span>

<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>##+同上/ctrl+2</p>
<h2 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h2><p>###+同上/ctrl+3</p>
<p>……</p>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>编号标点后有空格，回车自动添加序号,添加/删除序号，会自动补序号，两次回车或下键取消序号</p>
<p>tab降级</p>
<p>shift+tab升级</p>
<p>快捷键：ctrl+shift+[</p>
<ol>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>*/-+空格+内容，升降级同有序列表</p>
<p>快捷键：ctrl+shift+]</p>
<ul>
<li>立秋<ul>
<li>网课？</li>
</ul>
</li>
</ul>
<h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>-空格[空格]空格</p>
<ul>
<li><input disabled type="checkbox"> <ul>
<li><input checked disabled type="checkbox"> </li>
</ul>
</li>
</ul>
<p>不如段落中添加快</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th align="left">345</th>
<th align="center">678</th>
<th align="right">91011</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
<p>段落中插入</p>
<p>crtl+回车加行</p>
<p>|内容|内容|内容|    回车执行</p>
<h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>反引号+内容+反引号</p>
<p><code>java</code></p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C: <span class="built_in">printf</span> (<span class="string">&quot;hello,world&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python: <span class="built_in">print</span> (<span class="string">&quot;hello,world&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java: System.out.println(<span class="string">&quot;hello,world!&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>ctrl+shift+i</p>
<p><code>![1]</code>(C:\Users\Acer\Pictures\1.jpg省略了一个圆括号</p>
<p>就这吧，Typora软件很方便</p>
<p>快捷键应该用于频繁使用的语法</p>
]]></content>
  </entry>
  <entry>
    <title>C语言程序设计进阶（1）</title>
    <url>/2021/09/14/fourteenth/</url>
    <content><![CDATA[<h1 id="数组和字符串"><a href="#数组和字符串" class="headerlink" title="数组和字符串"></a>数组和字符串</h1><h2 id="指针的使用"><a href="#指针的使用" class="headerlink" title="指针的使用"></a>指针的使用</h2><span id="more"></span>

<h3 id="指针的应用场景"><a href="#指针的应用场景" class="headerlink" title="指针的应用场景"></a>指针的应用场景</h3><p>1.函数返回多个值时，某些值只能通过指针返回，而传入函数的参数，实际上是需要保存带回的结果的变量</p>
<p>2.函数返回运算的状态，指针返回函数运算的结果</p>
<h2 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h2><p>1.数组作为函数参数时可被看作指针，数组变量就是特殊的指针</p>
<p>2.数组变量本身表达地址，可不用&amp;，但是数组的单元表达的是变量，须用&amp;</p>
<p>3.[]运算符也可以对指针做，*也可以对数组做</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p[<span class="number">0</span>]&lt;==&gt;a[<span class="number">0</span>]</span><br><span class="line">*a=<span class="number">25</span>    </span><br></pre></td></tr></table></figure>

<p>4.数组变量是const的指针，所以不能被赋值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[]&lt;==&gt;<span class="keyword">int</span> * <span class="keyword">const</span> a</span><br></pre></td></tr></table></figure>

<h2 id="指针与const"><a href="#指针与const" class="headerlink" title="指针与const"></a>指针与const</h2><h3 id="指针是const"><a href="#指针是const" class="headerlink" title="指针是const"></a>指针是const</h3><p>指针不能指向其他变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> q = &amp;i;</span><br><span class="line">*q = <span class="number">26</span>; OK</span><br><span class="line">q++; ERROR</span><br></pre></td></tr></table></figure>

<h3 id="所指是const"><a href="#所指是const" class="headerlink" title="所指是const"></a>所指是const</h3><p>不能通过指针修改变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p = &amp;i;</span><br><span class="line">*p = <span class="number">26</span>; ERROR</span><br><span class="line">i =<span class="number">26</span>; OK</span><br><span class="line">p = &amp;j; OK</span><br></pre></td></tr></table></figure>

<p>const指针做函数参数时，函数内定义的非const的参数的值会被转换成const的值</p>
<h3 id="数组与const"><a href="#数组与const" class="headerlink" title="数组与const"></a>数组与const</h3><p>const数组表示数组内的单元变量都是const,不能被修改，且只能用如下方式初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>

<p>const数组作为函数参数时可以保护数组值不被修改</p>
<h2 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h2><p>给一个指针加1表示要让指针指向下一个变量，指针指向的应是一片连续分配的空间，如数组,否则没有意义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span>* p = a;</span><br><span class="line">*(p+<span class="number">1</span>)-&gt;a[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>指针还可以用+， +=， -， -=， –， ++</p>
<p>还可以让两个指针相减，结果为几个sizeof相对应的类型，sizeof(int)为4，结果若是5，就是两个地址相距20个字节</p>
<p>*p++可以先取结果后挪地址，适用于数组的连续操作，运行也更快</p>
<h2 id="0地址"><a href="#0地址" class="headerlink" title="0地址"></a>0地址</h2><p>一般写为NULL，NULL表示0地址更通用，0地址不能随便碰，如果给指针赋值0，一旦对该指针修改就会崩溃，</p>
<h2 id="指针的类型转换"><a href="#指针的类型转换" class="headerlink" title="指针的类型转换"></a>指针的类型转换</h2><p>void型的指针可以说是不指向什么地方的指针</p>
<p>指针也可以转换类型,下例为q通过p看i,q认为i是void型,i其实还是int型的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p=&amp;i;</span><br><span class="line"><span class="keyword">void</span> *q=(<span class="keyword">void</span>*)p;</span><br></pre></td></tr></table></figure>

<h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><p>变量可以向malloc申请以字节为单位的空间</p>
<p>malloc用到的头文件是#include&lt;stdlib.h&gt;,返回的结果是void*,需要转换为自己需要的类型,用完还要用free把空间还给内存，换错了会报错，计算机可是认识变量的。。。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(num*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">......                          </span><br><span class="line"><span class="built_in">free</span>(a);</span><br></pre></td></tr></table></figure>

<p>以后使用时要把结构先处理好，方便找位置free</p>
<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="putchar与getchar"><a href="#putchar与getchar" class="headerlink" title="putchar与getchar"></a>putchar与getchar</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putchar</span><span class="params">(<span class="keyword">int</span> c)</span></span>;</span><br></pre></td></tr></table></figure>

<p>向标准输入写一个字符，返回写了多少个字符,返回-1（EOF）表示写失败，EOF定义在stdio.h内，值为-1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getchar</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>((ch=getchar())!=EOF)&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的框架可用于多组输入，在没有失败时，程序会等我们下一次输入，如果失败了，就会跳出循环</p>
<p>getchar()读取一个字符后会先putchar(ch)，输出到缓冲区，缓冲区接受到回车时会把一系列字符变为一起字符串输出（提高效率），如果没有缓冲区，我们一输入就会输出，word输出就成了wwoorrdd，在输入和输出之间有一个shell帮我们处理缓冲区</p>
<h3 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *a[]=&#123;</span><br><span class="line">    <span class="string">&quot;Hello&quot;</span></span><br><span class="line">    <span class="string">&quot;World&quot;</span></span><br><span class="line">    <span class="string">&quot;abcdefghijk&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字符串数组的每一个单元都是一个指针，指向一个存放字符串的地方,有时可以代替switch case</p>
<h3 id="程序函数"><a href="#程序函数" class="headerlink" title="程序函数"></a>程序函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>;</span><br></pre></td></tr></table></figure>



<p>main（）括号里其实是有参数的，argv[0]是命令本身，具体以后碰到再说</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>评论区开放！</title>
    <url>/2021/08/15/fourth/</url>
    <content><![CDATA[<h1 id="gitalk已启用"><a href="#gitalk已启用" class="headerlink" title="gitalk已启用"></a>gitalk已启用</h1><p>nexT支持gitalk,评论者只需有GitHub账号即可，账号可在github官网免费注册，注册真不麻烦，github是一个共享源码的网站，不会有安全隐患，欢迎注册/登录github留言！又白嫖了一次嘿嘿</p>
]]></content>
      <tags>
        <tag>message</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客网做题时遇到的细节（持续更新）</title>
    <url>/2021/08/22/ninth/</url>
    <content><![CDATA[<h2 id="1-四舍五入"><a href="#1-四舍五入" class="headerlink" title="1. 四舍五入"></a>1. 四舍五入</h2><span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">单精度保留小数点后两位:a = (<span class="keyword">int</span>)(a*<span class="number">100</span>+<span class="number">0.5</span>)/<span class="number">100.0</span>;</span><br><span class="line">双精度保留小数点后两位:a = (<span class="keyword">int</span>)(a*<span class="number">10000</span>+<span class="number">0.5</span>)/<span class="number">10000.0</span>;</span><br><span class="line">正整数:(<span class="keyword">int</span>)(a+<span class="number">0.5</span>)，负整数把+换成-;</span><br><span class="line">math.h头文件里有round(...),可直接四舍五入</span><br></pre></td></tr></table></figure>



<h2 id="2-输出确定位数的小数"><a href="#2-输出确定位数的小数" class="headerlink" title="2. 输出确定位数的小数"></a>2. 输出确定位数的小数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%<span class="number">.1</span>f   %<span class="number">.1</span>lf</span><br><span class="line"></span><br><span class="line">%<span class="number">.2</span>f   %<span class="number">.2</span>lf</span><br></pre></td></tr></table></figure>

<p>在%后加上点和位数表示要保留小数点后几位</p>
<h2 id="3-输出返回值"><a href="#3-输出返回值" class="headerlink" title="3. 输出返回值"></a>3. 输出返回值</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> a=<span class="built_in">printf</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印函数的返回值就是字符个数，\n是一个字符，要单独打印</p>
<h2 id="4-域宽"><a href="#4-域宽" class="headerlink" title="4. 域宽"></a>4. 域宽</h2><p>指存放输出数据的宽度</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%10d&quot;</span>,a);</span><br></pre></td></tr></table></figure>

<p>printf可以使用使用格式控制串“%md”输出域宽为m的十进制整数</p>
<p>m前有0则会在空位补零</p>
<p>如果要把生日分隔成年月日，可以这样写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>  y,m,d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%4d%2d%2d&quot;</span>,&amp;y,&amp;m,&amp;d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;year=%04d\n&quot;</span>,y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;month=%02d\n&quot;</span>,m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;date=%02d&quot;</span>,d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>%0指的是在单个数字前补零，如果不用，单个数字前会有空格</p>
<p>这里没有return 0也能运行，可能是编译器允许的唯一特例。</p>
<h2 id="5-进制的前导"><a href="#5-进制的前导" class="headerlink" title="5. 进制的前导"></a>5. 进制的前导</h2><p>H表示的是Hex,表示是16进制数。前导标志是0x；<br>B表示的是Bit,表示是二进制.无前导标志；<br>O表示的是Octal,也可简写为OCT表示是八进制,前导为0；<br>D表示是Decem,表示十进制。无前导标志；</p>
<p>原题让输出1234的八进制与十六进制（大写）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#o %#X&quot;</span>,<span class="number">1234</span>,<span class="number">1234</span>);<span class="comment">//用前导控制符</span></span><br><span class="line">  <span class="comment">//printf(&quot;0%o 0X%X&quot;,1234,1234);//自己写前导</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用#可以使前导显示，结果的大小写取决于%后x的大小写</p>
<h2 id="6-数据类型强制转换"><a href="#6-数据类型强制转换" class="headerlink" title="6.数据类型强制转换"></a>6.数据类型强制转换</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">如</span><br><span class="line">b=(<span class="keyword">int</span>)a;</span><br><span class="line">b=(<span class="keyword">char</span>)a*<span class="number">10</span>;</span><br><span class="line">b=(<span class="keyword">float</span>)a%<span class="number">10</span>;</span><br><span class="line">等等,要赋值给另一个变量，如果直接打印就不用了</span><br></pre></td></tr></table></figure>

<h2 id="7-次方"><a href="#7-次方" class="headerlink" title="7.次方"></a>7.次方</h2><p>用到了pow函数</p>
<p>pow函数用来求x的y次幂</p>
<p>如pow(5,2);</p>
<p>结果为25</p>
<h2 id="8-根号"><a href="#8-根号" class="headerlink" title="8.根号"></a>8.根号</h2><p>形式：sqrt(…)</p>
<p>海伦公式：</p>
<p>d=(a+b+c)/2;</p>
<p>e=sqrt((d*(d-a)<em>(d-b)</em>(d-c)));</p>
<h2 id="9-EOF"><a href="#9-EOF" class="headerlink" title="9.EOF"></a>9.EOF</h2><p>在stdio.h中就规定了EOF就是-1，EOF即END OF FILE,在while循环中以EOF作为文件结束标志</p>
<p>我们常见到while(scanf(“%d”,a)!=EOF){…}</p>
<p>可用于多组输入</p>
<h2 id="10-位移运算符"><a href="#10-位移运算符" class="headerlink" title="10.位移运算符"></a>10.位移运算符</h2><p>&lt;&lt;和&gt;&gt;,通过箭头方向可以很好的辨别，分别是C语言位运算符中的左移运算符和右移运算符，如表达式13&lt;&lt;2，它的运算过程为：</p>
<p>13的用二进制（四个字节，不考虑符号）表示为，0000 0000 0000 0000 0000 0000 0000 1101，那么向左移两位，右侧补0，则变为0000 0000 0000 0000 0000 0000 0011 0100 换成十进制即变为52</p>
<p>同理，再举一个例子，如表达式25&gt;&gt;3，表示25的二进制位向右移三位，由</p>
<p>0000 0000 0000 0000 0000 0000 0001 1001 变为0000 0000 0000 0000 0000 0000 0000 0011 即十进制3</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    a=<span class="number">13</span>&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    b=<span class="number">25</span>&gt;&gt;<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d\n&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出为a=52，b=3</p>
<p>应用：</p>
<p>1.左移N位的本质是乘以2的N次方</p>
<p>2.右移N位的本质是除以2的N次方</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>也许今天是个不错的开始</title>
    <url>/2021/08/14/second/</url>
    <content><![CDATA[<p> 很多时候我都难以做到真正的自律，更多的时候是<strong>他律</strong>。可谁会有时间监督我呢，我无可否认我的缺陷，但我的<strong>弱点</strong>有时却可以弥补缺陷，我举几个可行度高的例子。</p>
<span id="more"></span>

<h2 id="图书馆"><a href="#图书馆" class="headerlink" title="图书馆"></a>图书馆</h2><p>对于我来说，去图书馆是寻找压力的方式之一。我会先略显仓促地选择好合适的座位，等到安静下来，焦虑的心已然平复，我会完全融入群体当中，这时我会把读书和学习当作理所应当的事。那些来来往往，装模做样，假装学习的人也只能凸显我的安静。我不时给自己积极的心理暗示，尽管我本来就难以呆在人多的地方，我还是努力去利用好这样宁静而又略带紧张的氛围。</p>
<p><img src="https://mz.eastday.com/22584710.jpg" alt="查看源图像"></p>
<p>当然还有<strong>线上</strong>的自习室，不过效果会差很多，最好提前约好同学结伴上线。qq自带的自习室我也曾用过，有一次学了一上午，效果还不错。</p>
<h2 id="强制锁机"><a href="#强制锁机" class="headerlink" title="强制锁机"></a>强制锁机</h2><p>这属实是无奈之举，我也曾在假期使用过，有一些app支持强制锁机，是你反悔也没有退出键的那种，不过可能会对手机正常使用，信息接受造成不可预估的影响。</p>
<p><img src="https://pic1.zhimg.com/80/v2-65e826e4d58bd6149962061acbd4608e_720w.jpg?source=1940ef5c" alt="img"></p>
<h2 id="女朋友？"><a href="#女朋友？" class="headerlink" title="女朋友？"></a>女朋友？</h2><p>没错，好吧，这个我还没体验过。。。</p>
<p>不过两人共勉确实是不错的设想，也许你们有一天会明白程序员的浪漫，我暂且把dev-c++当成女友吧，今晚<strong>码</strong>上见。</p>
<p>话说今天我被强喂了不少狗粮呢[哭笑]</p>
<p><img src="https://tse1-mm.cn.bing.net/th/id/R-C.cbb4c3c2058543dcba1c9cc15f0f62a1?rik=k9pGZKFw6C8zNA&riu=http://www.wsm.cn/uploads/allimg/161104/26-161104091331.jpg&ehk=lmqLW5yF0bTbg/Kh1EQEn5FanN8wAyOrqGQNa9VLgzY=&risl=&pid=ImgRaw&r=0" alt="查看源图像"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>也许明天也是个不错的开始，哦不，就今天！</p>
<p><img src="https://pic4.zhimg.com/v2-b10e616220e087e44ec7766d55b3cd1d_r.jpg" alt="查看源图像"></p>
]]></content>
      <tags>
        <tag>daily life</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言程序设计进阶（2）</title>
    <url>/2021/10/10/seventeenth/</url>
    <content><![CDATA[<h2 id="结构类型"><a href="#结构类型" class="headerlink" title="结构类型"></a>结构类型</h2><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举是一种用户定义的数据类型，用关键字enum以如下语法声明：</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">name</span>&#123;</span>name1,name2,...，namen&#125;</span><br></pre></td></tr></table></figure>

<p>枚举类型名字通常不怎么使用，要用的是大括号里的名字，这些常量符号类型为int，默认值依次为0到n，即name1为0，name2为1，最后一个常量的值也是常量的个数，也可以在声明枚举量时指定值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">name</span>&#123;</span>name1=<span class="number">3</span>,name2,name3=<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>

<p>当需要一些可以排列起来的常量值时，定义枚举可以实现，在switch-case语句中可以<strong>用常量符号代替数字</strong>，如case name1: …;等，比定义独立的const int变量更好用</p>
<p>枚举类型是以整数做内部计算和外部输入输出的,<strong>枚举只是int</strong>，赋给枚举变量1~n以外的整数也不会有任何warning和error</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><h4 id="声明结构类型的三种方式"><a href="#声明结构类型的三种方式" class="headerlink" title="声明结构类型的三种方式"></a>声明结构类型的三种方式</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name</span> <span class="title">pl</span>,<span class="title">p2</span>;</span></span><br><span class="line"><span class="comment">//p1 和 p2 都是point⾥⾯有x和y的值</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;p1,p2;</span><br><span class="line"><span class="comment">//p1 和 p2都是⼀种⽆名结构，⾥⾯有x和y</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//p1,p2;p1和p2都是point⾥⾯有x和y的值t</span></span><br></pre></td></tr></table></figure>

<p>对于第⼀和第三种形式，都声明了结构point。但是第⼆种形式没有声明point，只是定义了两个变量，下面是一个用例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">x</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;<span class="comment">//通常在函数外部声明结构类型，这样就可以被多个函数所使⽤了</span></span><br><span class="line">&#125;p1,p2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">x</span> <span class="title">y</span>;</span></span><br><span class="line">    y.a=<span class="number">1</span>;</span><br><span class="line">    y.b=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>,y.a,y.b);<span class="comment">//也可以用%i,在printf中二者效果一样，scanf则分进制</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结构的初始化"><a href="#结构的初始化" class="headerlink" title="结构的初始化"></a>结构的初始化</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">x</span> <span class="title">y</span>=</span>&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">x</span> <span class="title">k</span>=</span>&#123;.a=<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>,y.a,y.b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种初始化方式，可以仅指定某些成员初始化</p>
<h4 id="结构运算"><a href="#结构运算" class="headerlink" title="结构运算"></a>结构运算</h4><p>要访问整个结构，直接⽤结构变量的名字</p>
<p>对于整个结构，可以做赋值、取地址，也可以 传递给函数参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p1 = (struct name)&#123;<span class="number">5</span>, <span class="number">10</span>&#125;; <span class="comment">// 相当于p1.x = 5; p1.y = 10;</span></span><br><span class="line"> p1 = p2;<span class="comment">// 相当于p1.x = p2.x; p1.y = p2.y;</span></span><br><span class="line"><span class="comment">//(数组不能做这两种运算)</span></span><br></pre></td></tr></table></figure>

<h4 id="结构指针"><a href="#结构指针" class="headerlink" title="结构指针"></a>结构指针</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> *<span class="title">pDate</span> =</span> &amp;today;</span><br></pre></td></tr></table></figure>

<p>必须需用&amp;，结构变量的名字不是地址，和数组区分开</p>
<h3 id="结构与函数"><a href="#结构与函数" class="headerlink" title="结构与函数"></a>结构与函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">day</span><span class="params">(struct name a)</span></span></span><br></pre></td></tr></table></figure>

<p>整个结构可以作为参数的值传⼊函数,这时候是在函数内新建⼀个结构变量，并<strong>复制</strong>调⽤者的结构的值,这样的函数也可以<strong>返回⼀个结构</strong></p>
<h4 id="输入结构并返回"><a href="#输入结构并返回" class="headerlink" title="输入结构并返回"></a>输入结构并返回</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getstruct</span><span class="params">(struct name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outstruct</span><span class="params">(struct name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">name</span> <span class="title">y</span>=</span>&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    getstruct(y);</span><br><span class="line">    outstruct(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getstruct</span><span class="params">(struct name p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p.a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p.b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>,p.a,p.b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outstruct</span><span class="params">(struct name p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>,p.a,p.b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>向函数提供一个结构y，函数会在内部新建⼀个结构变量p，读入输入的结构，我们比较一下getstruct(y)和outstruct(y)打印的结构是否与输入的结构相同，显然，outstruct仍然是0，0；main()中的y没有变，也就是说输入的结构没有返回，如何返回呢</p>
<p>解决方式有以下几种：</p>
<p>1.在函数中创建一个临时结构变量读入结构并返回，即return+临时结构名；</p>
<p>2.将y的地址传给函数，也就是结构指针</p>
<h4 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">&#125;day;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> *<span class="title">p</span>=</span>&amp;day;</span><br><span class="line">(*p).month=<span class="number">12</span>;</span><br><span class="line">p-&gt;month=<span class="number">12</span>;<span class="comment">//两种表述都可以，一般⽤-&gt;表⽰指针所指的结构变量中的成员</span></span><br></pre></td></tr></table></figure>

<h4 id="结构指针作为参数"><a href="#结构指针作为参数" class="headerlink" title="结构指针作为参数"></a>结构指针作为参数</h4><p>这会比创建一个临时结构好得多</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">y</span> =</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">inputPoint(&amp;y);</span><br><span class="line">output(y); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct point* <span class="title">inputPoint</span><span class="params">(struct point *p)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(“%d”,&amp;(p-&gt;x));</span><br><span class="line"> <span class="built_in">scanf</span>(“%d”,&amp;(p-&gt;y));</span><br><span class="line"> <span class="keyword">return</span> p;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>好处是传⼊传出只是⼀个指针的⼤⼩,返回传⼊的指针是⼀种套路</p>
<p>如果需要保护传⼊的结构不被函数修改我们可以const struct point *p</p>
<h4 id="结构中的结构"><a href="#结构中的结构" class="headerlink" title="结构中的结构"></a>结构中的结构</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dateAndTime</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">sdate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">time</span> <span class="title">stime</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>访问成员时用多个’.’就可以了</p>
<p>如果有变量定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rectangle</span> <span class="title">r</span>, *<span class="title">rp</span>;</span></span><br><span class="line">rp = &amp;r;</span><br></pre></td></tr></table></figure>

<p>那么下⾯的四种形式是等价的:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">r.pt1.x </span><br><span class="line">rp-&gt;pt1.x </span><br><span class="line">(r.pt1).x </span><br><span class="line">(rp-&gt;pt1).x</span><br></pre></td></tr></table></figure>

<p>如school.class.student1</p>
<h4 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">dates</span>[100];</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">dates</span>[] =</span> &#123;</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">2005</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">2005</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<p>每一个成员都要用大括号括起来</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言入门笔记（3）</title>
    <url>/2021/08/18/seventh/</url>
    <content><![CDATA[<h2 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h2><p>goto的使用</p>
<p>使用goto可以跳出多重循环，不建议在其他时候使用</p>
<span id="more"></span>

<img src="/2021/08/18/seventh/1.jpg" class title="blog">

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>&lt;类型&gt;变量名称[下标，即元素数量]</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a [<span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<p>数组是一种容器</p>
<p>其中所有的元素具有相同的数据类型</p>
<p>一旦创建无法改变大小</p>
<p>数组各元素在内存中连续依次排列</p>
<p>可出现在赋值的左边或右边，叫做左值或右值</p>
<p>下标范围为[0，数组大小-1]，超出界限则视为<font color="red">越界</font>，容易出错却不容易报错</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>举一个求和函数的例子</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> sum （ <span class="keyword">int</span> a,<span class="keyword">int</span> b )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = a;i &lt;= b; i++ )&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    print (<span class="string">&quot;%d到&amp;d的和为%d\n&quot;</span>,a,b,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">sum(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">sum(<span class="number">40</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<h3 id="函数头"><a href="#函数头" class="headerlink" title="函数头"></a>函数头</h3><p>其中第一行是函数头，void叫做返回类型，sum是起的函数名，括号内是参数表</p>
<p>函数头的括号起到了表示函数调用的作用，里面没有参数也不能被删去，如果有参数要给出正确的数量和顺序</p>
<p>函数可以<font color="red">简化</font>重复的程序,依次进行初始化和返回</p>
<h3 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h3><p>最大的代码块内是函数体</p>
<p>如果想把函数放在主函数下，要先把函数头作为<font color="red">声明</font>放在最前面，告诉编译器你创建了一个何类型，何函数名，何参数的函数，以免系统<font color="red">自上而下</font>识别到函数<font color="red">定义</font>时报错</p>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>return可以停止函数的执行，并送回一个值，返回的值可以赋给函数外的变量，函数内的变量与函数外的变量<font color="red">无关</font>，return可以单独使用，也可以接表达式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br></pre></td></tr></table></figure>

<p><strong>int</strong>类型的函数返回值</p>
<p>需要用return停止函数执行并返回结果</p>
<p><strong>void</strong>类型的函数不返回值，也就是说调用时不能做返回值的赋值</p>
<p>不能使用带值的return，也可以不用return</p>
<h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>调用函数时的圆括号里的逗号是标点符号，不是运算符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">i(a,b);</span><br><span class="line">i((a,b));</span><br></pre></td></tr></table></figure>

<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>循环语句，判断语句可以嵌套，函数则不能嵌套</p>
<h2 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h2><p>定义在函数内部的变量都时本地变量（目前学过的都是）</p>
<h2 id="生存期"><a href="#生存期" class="headerlink" title="生存期"></a>生存期</h2><p>变量从出现到消失的时期</p>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>变量起作用的代码范围</p>
<p>对于本地变量，它的生存期和作用域就是大括号（块）</p>
<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>本地变量定义在块内，可以是函数的块，也可以是语句的块内，也可以定义在语句的块内，甚至可以随便拉一对大括号来定义变量</p>
<p>块外定义的变量在块内仍有效</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>zzuli OJ 1077：空心菱形及其延伸</title>
    <url>/2021/09/24/sixteenth/</url>
    <content><![CDATA[<h1 id="zzuli-OJ-1077：空心菱形"><a href="#zzuli-OJ-1077：空心菱形" class="headerlink" title="zzuli OJ 1077：空心菱形"></a><a href="http://acm.zzuli.edu.cn/problem.php?id=1077">zzuli OJ 1077：空心菱形</a></h1><span id="more"></span>

<p>题目描述</p>
<p>输入一个整数n，（1&lt;=n&lt;=20）,输出一个空心菱形，其中每个边由n个’*’组成</p>
<p>输入：</p>
<p>输入包含一个整数,n（1&lt;=n&lt;=20）</p>
<p>输出：</p>
<p>输出一个空心菱形，每个边由n个’*’组成</p>
<p>样例输入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>样例输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    *</span><br><span class="line">   * *</span><br><span class="line">  *   *</span><br><span class="line"> *     *</span><br><span class="line">*       *</span><br><span class="line"> *     *</span><br><span class="line">  *   *</span><br><span class="line">   * *</span><br><span class="line">    *</span><br></pre></td></tr></table></figure>

<p>我的解法（题目没要求多组输入）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">2</span>*n<span class="number">-1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j-i==n<span class="number">-1</span>||i+j==n<span class="number">-1</span>||i-j==n<span class="number">-1</span>||i+j==<span class="number">3</span>*n<span class="number">-3</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先我们会发现填*的i和j满足某种函数关系,如果输入为n,我们可用以下框架建立一个空白棋盘，然后我们只需要找到i和j在矩阵中的一种或多种关系，以及棋盘的大小范围，就能随心所欲，画出想要的图案</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;行的范围;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;列的范围;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i和j在矩阵中的一种或多种关系)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="再举一个X形图案例子（牛客网bc68）"><a href="#再举一个X形图案例子（牛客网bc68）" class="headerlink" title="再举一个X形图案例子（牛客网bc68）"></a><a href="https://www.nowcoder.com/practice/83d6afe3018e44539c51265165806ee4?tpId=107&&tqId=33349&rp=1&ru=/ta/beginner-programmers&qru=/ta/beginner-programmers/question-ranking">再举一个X形图案例子（牛客网bc68）</a></h2><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>KiKi学习了循环，BoBo老师给他出了一系列打印图案的练习，该任务是打印用“*”组成的X形图案。</p>
<h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>多组输入，一个整数（2~20），表示输出的行数，也表示组成“X”的反斜线和正斜线的长度。</p>
<h3 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h3><p>针对每行输入，输出用“*”组成的X形图案。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*   *</span><br><span class="line"> * * </span><br><span class="line">  *  </span><br><span class="line"> * * </span><br><span class="line">*   *</span><br></pre></td></tr></table></figure>

<p>可以用刚刚提到的框架写：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j||i+j==n<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你学废了吗，嘿嘿</p>
<p>可能对你来说太简单了</p>
<p>其实我们还可以用&lt; &gt;号来填充图形或镂空图形，总之，这不比嵌套的if语句简单？</p>
<p>感谢大佬的光临让本站蓬荜生辉 : )</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言入门笔记（2）</title>
    <url>/2021/08/17/sixth/</url>
    <content><![CDATA[<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>一个表达式是一系列运算符和算子的组合，用来计算一个值</p>
<span id="more"></span>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>+，-，*，/,%(取余)……</p>
<p>还有</p>
<img src="/2021/08/17/sixth/344567.jpg" class title="blog">

<h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><img src="/2021/08/17/sixth/23454.jpg" class title="blog">

<p>举个例子:a=b=1,是先把1赋给b,再把b的值赋给a</p>
<h4 id="算子"><a href="#算子" class="headerlink" title="算子"></a>算子</h4><p>参与运算的值，可以是常数，变量，返回值…..</p>
<h4 id="关系运算的结果"><a href="#关系运算的结果" class="headerlink" title="关系运算的结果"></a>关系运算的结果</h4><p>成立则为1,否则为0</p>
<h4 id="复合赋值"><a href="#复合赋值" class="headerlink" title="复合赋值"></a>复合赋值</h4><p>有五种分别为</p>
<p>+=  -=  *=  /=  %=</p>
<p>举例: a += 1即a = a + 1</p>
<h4 id="特殊的递增递减运算符"><a href="#特殊的递增递减运算符" class="headerlink" title="特殊的递增递减运算符"></a>特殊的递增递减运算符</h4><p>++与–</p>
<p>作用是给变量加1或减1</p>
<p>举例: a++ 即 a += 1 即 a = a + 1</p>
<p>a++ 与 ++a 不一样,原因如图</p>
<img src="/2021/08/17/sixth/36745.jpg" class title="blog">

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*多行注释内容</span></span><br><span class="line"><span class="comment">  多行注释内容</span></span><br><span class="line"><span class="comment">  多行注释内容*/</span></span><br></pre></td></tr></table></figure>

<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>高中讲过一部分,如图</p>
<img src="/2021/08/17/sixth/34565.png" class title="blog">

<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><p>if的四种用法:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">if</span>(条件成立)&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span><span class="keyword">if</span>(条件成立)</span><br><span class="line">    ...;</span><br><span class="line"><span class="comment">//也可以这样写,但要注意分号的位置</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="keyword">if</span>(条件成立)&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span><span class="keyword">if</span>(条件成立)&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//级联if-else if,else只和最近的那个if匹配</span></span><br></pre></td></tr></table></figure>

<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">while</span> (...)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进循环前就需要检查条件是否满足</span></span><br><span class="line"><span class="number">2.</span><span class="keyword">do</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">while</span> (...);</span><br><span class="line"><span class="comment">//做完一轮循环后再检查条件是否满足</span></span><br><span class="line"><span class="number">3.f</span><span class="keyword">or</span> (初始动作;条件;每轮的动作) </span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//c99 only</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>如果有固定的次数,用for</p>
<p>如果必须执行一次,用do_while</p>
<p>其他情况用while</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><img src="/2021/08/17/sixth/546.jpg" class title="blog">

<p>true对应的值是1,false对应的值是0</p>
<p>优先级如图</p>
<img src="/2021/08/17/sixth/6543.jpg" class title="blog">

<p>即 非 &gt; 或 &gt; 且</p>
<h2 id="C语言中逗号的作用"><a href="#C语言中逗号的作用" class="headerlink" title="C语言中逗号的作用"></a>C语言中逗号的作用</h2><p>1.做运算符,若干式子用逗号隔开,自左向右依次运行</p>
<p>2.做分隔符,主要在for中使用,如:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (a=<span class="number">1</span>,b=<span class="number">2</span>;a&lt;b;a++,b++)......</span><br></pre></td></tr></table></figure>

<h2 id="进一步的判断"><a href="#进一步的判断" class="headerlink" title="进一步的判断"></a>进一步的判断</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (...) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: ...</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: ...</span><br><span class="line">    <span class="keyword">default</span>:...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//c99 only</span></span><br></pre></td></tr></table></figure>

<p>switch-case可以表示多路分支,其中编译器读到break时会跳出当前判断,因此case1,case2会一起执行,但case3不会执行,如果情况都不符,执行default</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机入门图书分享</title>
    <url>/2021/08/21/tenth/</url>
    <content><![CDATA[<h1 id="3本入门图书"><a href="#3本入门图书" class="headerlink" title="3本入门图书"></a>3本入门图书</h1><p><a href="https://pan.baidu.com/s/1wvdQ6bQqB3cdNQRzeLcrxg">https://pan.baidu.com/s/1wvdQ6bQqB3cdNQRzeLcrxg</a><br>0000</p>
<span id="more"></span>

<p>包含3本</p>
<p>1.c++primerplus6</p>
<img src="/2021/08/21/tenth/1.jpg" class title="blog">

<p>2.算法竞赛入门经典 紫书</p>
<img src="/2021/08/21/tenth/2.jpg" class title="blog">

<p>3.算法竞赛入门经典训练指南</p>
<img src="/2021/08/21/tenth/3.jpg" class title="blog">
]]></content>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客的原因</title>
    <url>/2021/08/15/third/</url>
    <content><![CDATA[<h1 id="搭建博客的原因"><a href="#搭建博客的原因" class="headerlink" title="搭建博客的原因"></a>搭建博客的原因</h1><p>也许是心血来潮，看到别人的博客满满都是学习编程的<strong>笔记</strong>，忍不住要试一下。也许这也算是<strong>他律</strong>了，尽管访问量不见上涨，我依旧有发博客的动力，也许只是刚开始有新鲜感（都这么说），但这东西确实上瘾。我觉得程序员的快乐来源中，成功运行程序的<strong>成就感，满足感</strong>应该是占比不少的。</p>
<span id="more"></span>

<p>也许暑假更应该了解大学，规划未来的<strong>路线</strong>，而不是继续学习许多新的知识，当然，我不否认预习的好处。</p>
<p>我已经打算<strong>考研</strong>，至少要去了解如何尽快过四六级，计算机考研考什么，考专硕还是学硕，奖学金怎么申请，面试笔试内容是什么，有哪些网站可以更好刷题，保研的条件我是否能企及……</p>
<p>我前几天又重温了2018年的华语辩论世界杯，辩题是21世纪青年人应该做加法还是减法，作为即将步入大学生活的青年，没有阅历不要紧，可以做适当的减法，到了大学，经历过便自然懂了，更应该做加法。青云姐姐的一句“趁着年轻，我偏要勉强”令我无比动容。</p>
<p><img src="http://p6.itc.cn/images01/20210112/f6c38f135f9c43c9853db7395dad59a7.jpeg"></p>
<p>只有构建好框架，才能往里面填充一些东西。博客就是一个框架，如果做的好，甚至会成为我面试时简历上的一个闪光点。</p>
<p>信息爆炸的时代，利用爬虫可以高效抓取网络信息，学习计算机，一方面是为了<strong>高薪</strong>，另一方面是让计算机成为我的大脑，让我能<strong>高效获取</strong>高质的<strong>信息</strong>。</p>
<p><img src="https://bbs-img-cbc-cn.obs.cn-north-1.myhuaweicloud.com/data/attachment/forum/202012/29/15055096ql2xdaub4r8bg7.png" alt="查看源图像"></p>
<p>话说回来，这是一个<strong>静态</strong>博客，我可以个性化布局，可以在本地写文章，网络成本低，完全<strong>免费</strong>，更适合我这种一无所知的小白。我用的是近年流行的方法，hexo部署到github,我没有期望太多访问量，所以关于链接无法被百度收录的问题也不必在乎（github禁止百度爬虫，当然有大佬也能解决）。我用的是热门的nexT主题，出问题了容易得到网络<strong>帮助</strong>。</p>
<p>经验都是<strong>坑</strong>出来的，我搭建hexo时用cmd安装不了git，又在git bash重试了一遍。</p>
<p>搭建成功的那份喜悦，让我觉得一切都值得。</p>
]]></content>
      <tags>
        <tag>message</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo d发布经常出错的解决方式</title>
    <url>/2021/09/11/thirteenth/</url>
    <content><![CDATA[<h1 id="详情"><a href="#详情" class="headerlink" title="详情"></a><a href="https://blog.csdn.net/qq_32454537/article/details/81338807">详情</a></h1><p>我以前在本地写好博客，想要push到git上，通常由于网络的问题发布失败，会出现如下字样，很恶心。</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">unable to access <span class="string">&#x27;https://github.com/yujingsea/yujingsea.github.io.git/&#x27;</span>: OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:<span class="number">443</span></span><br></pre></td></tr></table></figure>

<p>网上流传（我今天才在csdn找到方法）的解决方式是取消http代理</p>
<p>如果还解决不了，就要往host里添加代理了</p>
<p>打开Git Bash输入以下指令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure>

<p>然后发布博文就没问题了</p>
]]></content>
      <tags>
        <tag>message</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛入门(C语言)(持续更新)</title>
    <url>/2021/09/10/twelfth/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>算法用到的C语言范围在学习指针之前,尽可能寻找每个经典问题的最优解,也想借此做好笔记,方便回顾等等</p>
<span id="more"></span>

<p>最近去牛客网做了做入门题，我在138道基础题中见到好多新奇的解题思路，于是想把我见到的算法做个简单集合，由于时间有限，部分代码就直接转载了，超链接里有原网页</p>
<img src="/2021/09/10/twelfth/1.jpg" class title="blog">

<img src="/2021/09/10/twelfth/2.jpg" class title="blog">

<h2 id="1-反向输出一个n位数"><a href="#1-反向输出一个n位数" class="headerlink" title="1.反向输出一个n位数"></a>1.反向输出一个n位数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//思路一:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">        b=a%<span class="number">10</span>;</span><br><span class="line">        a=a/<span class="number">10</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*当然也可以简化*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a%<span class="number">10</span>);</span><br><span class="line">        a/=<span class="number">10</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//思路2:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%1d%1d%1d%1d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,d,c,b,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-大小写转换（多组输入）"><a href="#2-大小写转换（多组输入）" class="headerlink" title="2.大小写转换（多组输入）"></a>2.大小写转换（多组输入）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*scanf*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c\n&quot;</span>,&amp;a)!=EOF)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,a+<span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*getchar*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>((ch=getchar())!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">            ch+=<span class="number">32</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-判断字母"><a href="#3-判断字母" class="headerlink" title="3.判断字母"></a>3.判断字母</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">continue</span>;<span class="comment">//也可用getchar();</span></span><br><span class="line">        <span class="keyword">if</span>((ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>)||(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-四种排序"><a href="#4-四种排序" class="headerlink" title="4.四种排序"></a>4.四种排序</h2><p>列举四种排序：</p>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><a href="https://www.cnblogs.com/taltao/p/10087127.html">冒泡排序</a></h3><img src="/2021/09/10/twelfth/3.gif" class title="blog">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 之前的循环已经将i个元素送到末尾，不需要再次比较，故减去，因为跟后一个元素比较，为了避免溢出，故减一</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            <span class="comment">// 如果当前的元素比后一个元素小，就交换</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优化以后，加了一开关变量，因为当后面几轮的循环已经排好时，就没必要再判断了</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 之前的循环已经将i个元素送到末尾，不需要再次比较，故减去，因为跟后一个元素比较，为了避免溢出，故减一</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            <span class="comment">// 如果当前的元素比后一个元素小，就交换</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;   <span class="comment">// 有数据交换</span></span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有数据交换，提前结束</span></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">转载自博客园</span><br><span class="line">作者Taltao</span><br></pre></td></tr></table></figure>

<h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a><a href="https://zhuanlan.zhihu.com/p/54235498">桶排序</a></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;array_stu[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*把50个学生的分数分别扔到对应的桶里面去*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">100</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*如果分数跟桶的编号一样，就把这个桶的数据增加*/</span></span><br><span class="line">            <span class="keyword">if</span>(array_stu[i] ==j)</span><br><span class="line">            &#123;</span><br><span class="line">                array_out[j] ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*把排序后的数据输出*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*有些同学的分数是一样的,这里要格外注意*/</span></span><br><span class="line">        <span class="keyword">while</span>(array_out[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">            array_out[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">转载自知乎</span><br><span class="line">作者嵌入式Linux</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a><a href="https://blog.csdn.net/qq_44270296/article/details/102539421">选择排序</a></h3><img src="/2021/09/10/twelfth/4.gif" class title="blog">

<p>每一轮排好一个数放到最前或最后</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> min;</span><br><span class="line">	<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		min = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j]&lt;arr[min])</span><br><span class="line">				min = j;</span><br><span class="line">		&#125;</span><br><span class="line">		temp = arr[i];</span><br><span class="line">		arr[i] = arr[min];</span><br><span class="line">		arr[min] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">转载自csdn</span><br><span class="line">作者one of a king</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a><a href="https://blog.csdn.net/qq_44270296/article/details/102539421">插入排序</a></h3><img src="/2021/09/10/twelfth/5.gif" class title="blog">

<p>每一轮依次向后拿出一个数插入到前面已排好的序列中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		j = i - <span class="number">1</span>;</span><br><span class="line">		temp = arr[i];</span><br><span class="line">		<span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; arr[j]&gt;temp)</span><br><span class="line">		&#123;</span><br><span class="line">			arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">			j--;</span><br><span class="line">		&#125;</span><br><span class="line">		arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">转载自csdn</span><br><span class="line">作者one of a king</span><br></pre></td></tr></table></figure>

<h2 id="5-最值"><a href="#5-最值" class="headerlink" title="5.最值"></a>5.最值</h2><p>如果只用求最值，就没必要排序了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">max = a;</span><br><span class="line"><span class="keyword">if</span>(max &lt; b)</span><br><span class="line">max = b;</span><br><span class="line"><span class="keyword">if</span>(max &lt; c)</span><br><span class="line">max = c;</span><br></pre></td></tr></table></figure>

<h2 id="6-打印字符图案"><a href="#6-打印字符图案" class="headerlink" title="6.打印字符图案"></a>6.打印字符图案</h2><p>图案太多了，如菱形，沙漏，箭形，空心三角形，X形等等。我认为利用好循环条件，什么时候输出空格，什么时候输出字符，具体在哪一个或者哪些位置输出是最重要的。</p>
<p>就举一个X形的例子</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">5</span></span><br><span class="line">输出：</span><br><span class="line">*   *</span><br><span class="line"> * * </span><br><span class="line">  *  </span><br><span class="line"> * * </span><br><span class="line">*   *</span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j||i+j==n<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里利用了字符位置的特殊性，对角线就是字符输出的位置</p>
<p>如果想通过上下镂空金字塔拼接，太过麻烦，所以思路要尽可能简单易行</p>
<h2 id="7-最大公约数与最小公倍数"><a href="#7-最大公约数与最小公倍数" class="headerlink" title="7.最大公约数与最小公倍数"></a>7.最大公约数与最小公倍数</h2><p>最大公约数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(a&amp;&amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b) a%=b;</span><br><span class="line">        <span class="keyword">else</span> b%=a;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最小公倍数：</p>
<p>我们都知道（我可不知道。。。）两个数的乘积等于这两个数的最大公约数和最小公倍数的积</p>
<p>那么结果就显而易见了</p>
<h2 id="8-素数个数"><a href="#8-素数个数" class="headerlink" title="8.素数个数"></a>8.素数个数</h2><p>要判断一堆数中有几个素数，要知道如何判断一个数是素数</p>
<p>一开始我们会想判断n是否能被2到n-1的整数整除，但还有优化的余地，如果一个质数大于根号n，而n可以除尽它，那么n必然也可以除尽一个更小的质数。因此我们可以判断n是否能被2到√n间的整数整除</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=a;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=<span class="built_in">sqrt</span>(i);j+=<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i%j == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;<span class="built_in">sqrt</span>(i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a-count<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-有序序列判断"><a href="#9-有序序列判断" class="headerlink" title="9.有序序列判断"></a>9.有序序列判断</h2><p>有序包括正序，逆序以及一连串相等的数字，反过来想，无序就是正序和逆序都出现了，所以可以这样写：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> flag1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])</span><br><span class="line">            flag1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[i]&lt;arr[i+<span class="number">1</span>])</span><br><span class="line">            flag2=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag1&amp;&amp;flag2)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;unsorted&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sorted&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-有序插入一个数"><a href="#10-有序插入一个数" class="headerlink" title="10.有序插入一个数"></a>10.有序插入一个数</h2><p>如果有n个数，可以从第（n-1）个数开始比大小，原数大就往后放，空出一个位置，到下一轮如果原数小，就可以把输入的数放到原来留出的空位了（当然也可以正着来）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">55</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">for</span>(i=n;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i<span class="number">-1</span>]&gt;x)&#123;</span><br><span class="line">            a[i]=a[i<span class="number">-1</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            a[i]=x;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>) a[i]=x;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==n) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-删除序列指定数字"><a href="#11-删除序列指定数字" class="headerlink" title="11.删除序列指定数字"></a>11.删除序列指定数字</h2><p>可以让指定数字小于零，小于零就跳过输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        <span class="keyword">if</span>(x==a[j])</span><br><span class="line">            a[j]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[k]&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-矩阵元素定位"><a href="#12-矩阵元素定位" class="headerlink" title="12.矩阵元素定位"></a>12.矩阵元素定位</h2><p>用二维数组很方便</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[n<span class="number">-1</span>][m<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="13-简单动态规划和迭代"><a href="#13-简单动态规划和迭代" class="headerlink" title="13.简单动态规划和迭代"></a>13.简单动态规划和迭代</h2><p><strong>动态规划</strong>是一种在数学、计算机科学和经济学中使用的，通过<strong>把原问题分解为相对简单的子问题</strong>的方式求解复杂问题的方法</p>
<p>下面是一个经典的走台阶的问题</p>
<p>有n个台阶，小明一次可走1个台阶或2个台阶，问有几种走法</p>
<p>我们可以试着找找<strong>规律</strong>：</p>
<table>
<thead>
<tr>
<th align="center">台阶数</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
<th align="center">…</th>
<th align="center">n</th>
</tr>
</thead>
<tbody><tr>
<td align="center">子结构</td>
<td align="center">f(1)</td>
<td align="center">f(2)</td>
<td align="center">f(3)</td>
<td align="center">f(4)</td>
<td align="center">f(5)</td>
<td align="center">f(6)</td>
<td align="center">…</td>
<td align="center">f(n)</td>
</tr>
<tr>
<td align="center">跳法</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">1+2=3</td>
<td align="center">2+3=5</td>
<td align="center">3+5=8</td>
<td align="center">5+8=13</td>
<td align="center">…</td>
<td align="center">f(n)=f(n-1)+f(n-2)</td>
</tr>
</tbody></table>
<p>因此我们发现解法数满足<strong>f(n)=f(n-1)+f(n-2)<strong>，这不就是是</strong>斐波那契数列</strong>么</p>
<p>下面是动态规划的解法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> a[n];</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=a[i<span class="number">-2</span>]+a[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，数组记录了多个结果，我们可以用迭代(就是可以不断地用旧的值得到新的值，直到我们想要的得到的结果)，只记三个结果：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c=a+b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
</search>
