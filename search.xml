<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言入门笔记（1）</title>
    <url>/2021/08/17/fifth/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我觉得目前比较好的c语言入门网课有b站的失乐-try上传的C语言入门视频，以及中国大学mooc中浙大翁恺的<a href="https://www.icourse163.org/course/ZJU-199001">C语言程序设计入门视频</a>。都对新手友好到了极点。我这里选的是翁恺的课，比较系统，也比较专业。我会着重指出易错易忘的知识，以便复习，其他不再赘述。</p>
<p>关于对计算机知识的深入理解，我推荐b站搬运的YouTube的<a href="https://b23.tv/J0ghf3">计算机科学速成课</a>，里面把计算机的历史，发展，进化讲的<strong>相对容易</strong>理解些，虽然有些知识我听不懂，但我大为震撼。</p>
<span id="more"></span>

<h1 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h1><p>Windows系统推荐dev-C++，当然也可以线上编译，不过不能保存</p>
<h1 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span> ( <span class="string">&quot;hello world\n&quot;</span> );</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了printf函数，剩下的是c语言的基本框架</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>a = 0;</p>
<p>把0赋值给a，a作为变量保存了数据0，a之后还可变为其它值。</p>
<p>a是一种标识符，<font color='red'>只能有字母，数字，下划线组成，数字不能位于头部，关键字不能做标识符</font>。</p>
<p>关键字用多了就记住了，例如char,do,while,if,sizeof….</p>
<h1 id="赋值与初始化"><a href="#赋值与初始化" class="headerlink" title="赋值与初始化"></a>赋值与初始化</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br></pre></td></tr></table></figure>



<p>这里定义了一个变量a,但你不知道a是几，系统保存的可能是一个任意的数；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a =<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>在定义变量时，建议<font color='red'>在代码开头的地方定义变量</font>，因为ansi c标准只能在代码开头的地方定义变量，c99标准则无此要求。</p>
<p>a被初始化为0，系统保存的a的值是0。</p>
<p><font color='red'>初始化是一个好习惯</font>，不这样做可能会莫名报错，尤其到指针那一块。</p>
<h1 id="scanf函数"><a href="#scanf函数" class="headerlink" title="scanf函数"></a>scanf函数</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br></pre></td></tr></table></figure>

<p>%d意为取整数a，&amp;取地址，让我输入a</p>
<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span> + b</span><br></pre></td></tr></table></figure>

<p>直接写在程序里的1是直接量，是常量的一种。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>const作为修饰符加在int的前面，使a成为一个具有常属性的变量，即常变量a不能再被修改，否则会报错。</p>
<h1 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h1><p>分为单精度浮点数和双精度浮点数，双精度浮点数能保留更多位小数，更精确,%f是取小数。</p>
<p>我们试一下下面的运算</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果为%d。\n&quot;</span>,((a+b)/<span class="number">3</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里输入5，5，结果为3，没有小数</p>
<p>如果输入10 ，10，结果不是6.666…而是6，这里说明4舍5入不符合</p>
<p>这里需要知道%f是取单精度，%lf是双精度</p>
<p>我们再试一下输出小数结果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果为%f。\n&quot;</span>,((a+b)/<span class="number">3</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里输入5，5，结果为0.000000，又出错了</p>
<p>到这里要指出：</p>
<p>在c语言中<font color='red'>两个整数的运算结果只能是整数</font>，用&amp;d得到的是整数，用&amp;f得不到正确结果，如果把3换成3.0，系统在计算时会把a+b的结果化为浮点数，<font color='red'>浮点数间的运算就是浮点数</font>。我们再试一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果为%f。\n&quot;</span>,((a+b)/<span class="number">3.0</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里输入5，5，结果正确，为3.333333</p>
]]></content>
      <tags>
        <tag>c语言入门</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法笔记（Typora)</title>
    <url>/2021/08/13/first/</url>
    <content><![CDATA[<p><em>不学这个怎么迅速发文章。。。</em></p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p> #+空格+内容 回车执行/ctrl+1，ctrl+0复原</p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>##+同上/ctrl+2</p>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>###+同上/ctrl+3</p>
<p>……</p>
<span id="more"></span>

<h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><p>编号标点后有空格，回车自动添加序号,添加/删除序号，会自动补序号，两次回车或下键取消序号</p>
<p>tab降级</p>
<p>shift+tab升级</p>
<p>快捷键：ctrl+shift+[</p>
<ol>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
</ol>
<h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><p>*/-+空格+内容，升降级同有序列表</p>
<p>快捷键：ctrl+shift+]</p>
<ul>
<li>立秋<ul>
<li>网课？</li>
</ul>
</li>
</ul>
<h1 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h1><p>-空格[空格]空格</p>
<ul>
<li><input disabled="" type="checkbox"> <ul>
<li><input checked="" disabled="" type="checkbox"> </li>
</ul>
</li>
</ul>
<p>不如段落中添加快</p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table>
<thead>
<tr>
<th align="left">345</th>
<th align="center">678</th>
<th align="right">91011</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
<p>段落中插入</p>
<p>crtl+回车加行</p>
<p>|内容|内容|内容|    回车执行</p>
<h1 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h1><p>反引号+内容+反引号</p>
<p><code>java</code></p>
<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C: <span class="built_in">printf</span> (<span class="string">&quot;hello,world&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python: <span class="built_in">print</span> (<span class="string">&quot;hello,world&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java: System.out.println(<span class="string">&quot;hello,world!&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>ctrl+shift+i</p>
<p><img src="C:\Users\Acer\Pictures\thumb-1920-911186.jpg"></p>
<p><code>![1]</code>(C:\Users\Acer\Pictures\1.jpg省略了一个圆括号</p>
<p>就这吧，Typora软件很方便</p>
<p>快捷键应该用于频繁使用的语法</p>
]]></content>
  </entry>
  <entry>
    <title>也许今天是个不错的开始</title>
    <url>/2021/08/14/second/</url>
    <content><![CDATA[<p> 很多时候我都难以做到真正的自律，更多的时候是<strong>他律</strong>。可谁会有时间监督我呢，我无可否认我的缺陷，但我的<strong>弱点</strong>有时却可以弥补缺陷，我举几个可行度高的例子。</p>
<span id="more"></span>

<h1 id="图书馆"><a href="#图书馆" class="headerlink" title="图书馆"></a>图书馆</h1><p>对于我来说，去图书馆是寻找压力的方式之一。我会先略显仓促地选择好合适的座位，等到安静下来，焦虑的心已然平复，我会完全融入群体当中，这时我会把读书和学习当作理所应当的事。那些来来往往，装模做样，假装学习的人也只能凸显我的安静。我不时给自己积极的心理暗示，尽管我本来就难以呆在人多的地方，我还是努力去利用好这样宁静而又略带紧张的氛围。</p>
<p><img src="https://mz.eastday.com/22584710.jpg" alt="查看源图像"></p>
<p>当然还有<strong>线上</strong>的自习室，不过效果会差很多，最好提前约好同学结伴上线。qq自带的自习室我也曾用过，有一次学了一上午，效果还不错。</p>
<h1 id="强制锁机"><a href="#强制锁机" class="headerlink" title="强制锁机"></a>强制锁机</h1><p>这属实是无奈之举，我也曾在假期使用过，有一些app支持强制锁机，是你反悔也没有退出键的那种，不过可能会对手机正常使用，信息接受造成不可预估的影响。</p>
<p><img src="https://pic1.zhimg.com/80/v2-65e826e4d58bd6149962061acbd4608e_720w.jpg?source=1940ef5c" alt="img"></p>
<h1 id="女朋友？"><a href="#女朋友？" class="headerlink" title="女朋友？"></a>女朋友？</h1><p>没错，好吧，这个我还没体验过。。。</p>
<p>不过两人共勉确实是不错的设想，也许你们有一天会明白程序员的浪漫，我暂且把dev-c++当成女友吧，今晚<strong>码</strong>上见。</p>
<p>话说今天我被强喂了不少狗粮呢[哭笑]</p>
<p><img src="https://tse1-mm.cn.bing.net/th/id/R-C.cbb4c3c2058543dcba1c9cc15f0f62a1?rik=k9pGZKFw6C8zNA&riu=http://www.wsm.cn/uploads/allimg/161104/26-161104091331.jpg&ehk=lmqLW5yF0bTbg/Kh1EQEn5FanN8wAyOrqGQNa9VLgzY=&risl=&pid=ImgRaw&r=0" alt="查看源图像"></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>也许明天也是个不错的开始，哦不，就今天！</p>
<p><img src="https://pic4.zhimg.com/v2-b10e616220e087e44ec7766d55b3cd1d_r.jpg" alt="查看源图像"></p>
]]></content>
      <tags>
        <tag>daily life</tag>
      </tags>
  </entry>
  <entry>
    <title>评论区开放！</title>
    <url>/2021/08/15/fourth/</url>
    <content><![CDATA[<h1 id="gitalk已启用"><a href="#gitalk已启用" class="headerlink" title="gitalk已启用"></a>gitalk已启用</h1><p>nexT支持gitalk,评论者只需有GitHub账号即可，账号可在github官网免费注册，注册真不麻烦，github是一个共享源码的网站，不会有安全隐患，欢迎注册/登录github留言！又白嫖了一次嘿嘿</p>
]]></content>
      <tags>
        <tag>message</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客的原因</title>
    <url>/2021/08/15/third/</url>
    <content><![CDATA[<h1 id="搭建博客的原因"><a href="#搭建博客的原因" class="headerlink" title="搭建博客的原因"></a>搭建博客的原因</h1><p>也许是心血来潮，看到别人的博客满满都是学习编程的<strong>笔记</strong>，忍不住要试一下。也许这也算是<strong>他律</strong>了，尽管访问量不见上涨，我依旧有发博客的动力，也许只是刚开始有新鲜感（都这么说），但这东西确实上瘾。我觉得程序员的快乐来源中，成功运行程序的<strong>成就感，满足感</strong>应该是占比不少的。</p>
<span id="more"></span>

<p>也许暑假更应该了解大学，规划未来的<strong>路线</strong>，而不是继续学习许多新的知识，当然，我不否认预习的好处。</p>
<p>我已经打算<strong>考研</strong>，至少要去了解如何尽快过四六级，计算机考研考什么，考专硕还是学硕，奖学金怎么申请，面试笔试内容是什么，有哪些网站可以更好刷题，保研的条件我是否能企及……</p>
<p>我前几天又重温了2018年的华语辩论世界杯，辩题是21世纪青年人应该做加法还是减法，作为即将步入大学生活的青年，没有阅历不要紧，可以做适当的减法，到了大学，经历过便自然懂了，更应该做加法。青云姐姐的一句“趁着年轻，我偏要勉强”令我无比动容。</p>
<p><img src="http://p6.itc.cn/images01/20210112/f6c38f135f9c43c9853db7395dad59a7.jpeg"></p>
<p>只有构建好框架，才能往里面填充一些东西。博客就是一个框架，如果做的好，甚至会成为我面试时简历上的一个闪光点。</p>
<p>信息爆炸的时代，利用爬虫可以高效抓取网络信息，学习计算机，一方面是为了<strong>高薪</strong>，另一方面是让计算机成为我的大脑，让我能<strong>高效获取</strong>高质的<strong>信息</strong>。</p>
<p><img src="https://bbs-img-cbc-cn.obs.cn-north-1.myhuaweicloud.com/data/attachment/forum/202012/29/15055096ql2xdaub4r8bg7.png" alt="查看源图像"></p>
<p>话说回来，这是一个<strong>静态</strong>博客，我可以个性化布局，可以在本地写文章，网络成本低，完全<strong>免费</strong>，更适合我这种一无所知的小白。我用的是近年流行的方法，hexo部署到github,我没有期望太多访问量，所以关于链接无法被百度收录的问题也不必在乎（github禁止百度爬虫，当然有大佬也能解决）。我用的是热门的nexT主题，出问题了容易得到网络<strong>帮助</strong>。</p>
<p>经验都是<strong>坑</strong>出来的，我搭建hexo时用cmd安装不了git，又在git bash重试了一遍。</p>
<p>搭建成功的那份喜悦，让我觉得一切都值得。</p>
]]></content>
      <tags>
        <tag>message</tag>
      </tags>
  </entry>
</search>
